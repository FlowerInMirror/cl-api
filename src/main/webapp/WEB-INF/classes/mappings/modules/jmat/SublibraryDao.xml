<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.jmat.dao.SublibraryDao">

    <!--查找材料基础数据,通过四级科目ID.
    public MatBaseData findMatBaseDataByTreeFourID(String treeFourID);-->
    <select id="findMatBaseDataByTreeFourID" parameterType="String" resultType="MatBaseData">
        SELECT
        -- 一级/二级/材料名(三级)/规格名(四级)
        T1.tree_Name treeOneName,T2.tree_Name treeTwoName,T3.tree_Name matName,T4.tree_Name matSpec
        -- 类别(1成品，2非成品）
        ,ts_TypeState classify
        -- 单位(单位ID/单位名)
        ,unit_Name unit
        FROM V_Tree T4
        LEFT JOIN V_Tree T3 ON T4.tree_ParentID=T3.tree_ID
        LEFT JOIN V_Tree T2 ON T3.tree_ParentID=T2.tree_ID
        LEFT JOIN V_Tree T1 ON T2.tree_ParentID=T1.tree_ID
        LEFT JOIN V_TreeSst ON T4.tree_ID=ts_TreeID AND ts_Type=16 AND ts_jincheng=0--成品设置
        LEFT JOIN V_TreeBaseInfo ON T4.tree_ID=tbi_TreeID AND tbi_Status=0
        LEFT JOIN V_Unit ON unit_ID=tbi_unit
        WHERE T4.tree_ID= #{treeFourID} AND T4.tree_Level=4 AND T4.tree_jincheng=0
    </select>
    
    <!--获取子库一段列表,通过城市ID.
    public List<SublibrariesAList> findSublibrariesAListsByCityID(Integer cityID);-->
    <select id="findSublibrariesAListsByCityID" resultType="SublibrariesAList">
        -- 获取平台-子库一段列表
        EXEC PRO_MAT_GET_MMSLoop #{cityID}
    </select>

    <!--查找"计划"材料使用量集合,通过城市ID与数据量.
    public List<CostMaterialApplicationAmount> findPlanMatApplicationAmountsByCityIDAndTopNum(@Param("cityID")Integer cityID, @Param("topNum") Integer topNum);-->
    <select id="findPlanMatApplicationAmountsByCityIDAndTopNum" resultType="CostMaterialApplicationAmount" >
        WITH K AS (
        -- 获取 排名(针对城市)/城市ID/材料ID/总数量/平均价价
        SELECT
        --根据城市内分组,然后根据实际下单量总数排序(降序)
        ROW_NUMBER () OVER (
        PARTITION BY m_cityID
        ORDER BY
        SUM (pm_TotalCount) DESC
        ) TopNum,
        m_cityID,
        m_ID,
        SUM (pm_TotalCount) pod_AlreadyCount,
        -- 材料实际下单量总数
        CAST (
        AVG (pm_MatPrice) AS DECIMAL (18, 2)
        ) pod_MatPrice -- 材料单价平均价
        FROM
        V_ProInfoMaterial
        LEFT JOIN V_Material ON pm_MatID = m_ID
        WHERE
        pm_jincheng = 0
        AND m_jincheng = 0
        GROUP BY
        m_cityID,
        m_ID -- 城市ID,订单材料ID分组.
        ),
        A AS (
        -- 获得 材料ID/单量总数/分组行号/材料单价 = 条件topNum 使用量靠前的数据 小於等於 100 等效于 前 100 名
        SELECT
        m_ID AS pod_MatID,
        pod_AlreadyCount,
        TopNum,
        pod_MatPrice
        FROM
        K
        WHERE
        TopNum &lt;= #{topNum}
        AND m_cityID = #{cityID}
        ),
        AV AS (
        --获取 规格ID/材料档次/档次下材料的平均价
        SELECT
        m_TreeFour TreeID,
        m_Level MatLevel,
        CAST (
        AVG (m_CostPrice + m_InstallPrice) AS DECIMAL (18, 2)
        ) CostPrice
        FROM
        V_Material
        WHERE
        m_jincheng = 0
        AND m_updateState = 1
        AND (m_CostPrice + m_InstallPrice) > 0
        GROUP BY
        m_TreeFour,
        m_Level
        ) SELECT
        T1.tree_Name AS treeOneName,
        T2.tree_name AS treeTwoName,
        T3.tree_name AS treeThreeName,
        T4.tree_name AS treeFourName,
        unit_name AS unitName,
        m_Code AS matCode,
        m_brandName AS brandName,
        m_brandType AS brandType,
        m_CostPRice AS costPrice,
        m_QuotesPrice AS quotesPrice,
        m_InstallPrice AS installPrice,
        pod_MatPrice AS matAvgPrice,
        -- '此材料交易平均价'
        CostPrice AS nationwideMatAvgPrice,
        -- '全国平均成本价'
        CASE m_level
        WHEN 1 THEN
        'A'
        WHEN 2 THEN
        'B'
        WHEN 4 THEN
        'C'
        END AS matLevel,
        TopNum,
        pod_AlreadyCount AS totalSingleQuantity,
        -- 总单"量"
        m_ID AS matID
        FROM
        V_Material
        LEFT JOIN V_Tree T4 ON T4.tree_ID = m_treeFour
        LEFT JOIN V_Tree T3 ON T3.tree_ID = m_treeThree
        LEFT JOIN V_Tree T2 ON T2.tree_ID = m_treeTwo
        LEFT JOIN V_Tree T1 ON T1.tree_ID = m_treeOne
        LEFT JOIN dbo.V_TreeBaseInfo ON tbi_TreeID = m_treeFour
        LEFT JOIN dbo.V_Unit ON unit_id = tbi_unit
        INNER JOIN A ON pod_MatID = m_ID
        LEFT JOIN AV ON TreeID = m_treeFour
        AND m_Level = MatLevel
        WHERE
        m_jincheng = 0
        ORDER BY
        m_cityID,
        TopNum
    </select>

</mapper>